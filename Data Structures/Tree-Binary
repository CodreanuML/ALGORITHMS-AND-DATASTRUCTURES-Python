class Node():
    def __init__(self,value):
        self.value=value
        self.left_child=None
        self.right_child=None
        
    def add_left_child(self,child):
        if self.left_child==None:
            self.left_child=child
        else:
            print('Left Children is occupied')
        
    def add_right_child(self,child):
        if self.right_child==None:
            self.right_child=child
        else:
            print('Right Children is occupied')
            
    def remove_left_child(self):
        self.left_child=None

    def remove_right_child(self):
        self.right_child=None 
        
    def has_children(self):
        if self.left_child==None or self.right_child==None :
            return False
        else:
            return True
        
    def __str__(self):
        return str(self.value)
        
    def __rpr__(self):
        return self.value
        
        
class Tree():
    def __init__(self,node):
        self.root=node
        self.format_t=''
        
    def traverse_preorder(self,node_v):
        print(node_v.value)
        if node_v.has_children():
            self.format_t+='n'
        else:
            self.format_t+='l'
        try :
            self.traverse_preorder(node_v.left_child)
        except AttributeError:
            pass
        try:
            self.traverse_preorder(node_v.right_child)
        except AttributeError:
            pass
        
    def traverse_inorder(self,root):
        if root:
  
            self.traverse_inorder(root.left_child)
  
            self.traverse_inorder(root.right_child)
  
            print(root.value)
    
    def __str__(self):
        return str('tree having starting root {}'.format(self.root.value))
    
    def traverse_postorder(self,root):
        if root:
  
            self.traverse_inorder(root.left_child)
            print(root.value)
  
            self.traverse_inorder(root.right_child)
  
            
    
def findDepthRec(tree, n, index) :
 
    if (index[0] >= n or tree[index[0]] == 'l'):
        return 0
 
    # calc height of left subtree (In preorder
    # left subtree is processed before right)
    index[0] += 1
    left = findDepthRec(tree, n, index)
 
    
    index[0] += 1
    right = findDepthRec(tree, n, index)
    return (max(left, right) + 1)
 

def findDepth(tree, n) :
 
    index = [0]
    return findDepthRec(tree, n, index)
 
         

        
Root=Node(1)
Left_Child1=Node(2)
Right_Child1=Node(3)
Left_Child2=Node(4)
Right_Child2=Node(5)
Left_Child3=Node(6)
Right_Child3=Node(7)


MyTree=Tree(Root)
print(MyTree)
Root.add_left_child(Left_Child1)
Root.add_right_child(Right_Child1)

Left_Child1.add_left_child(Left_Child2)
Left_Child1.add_right_child(Right_Child2)

Right_Child1.add_left_child(Left_Child3)
Right_Child1.add_right_child(Right_Child3)

MyTree.traverse_preorder(Root)


print(MyTree.format_t)

tree= MyTree.format_t
n = len(tree)
 
print(findDepth(tree, n))
